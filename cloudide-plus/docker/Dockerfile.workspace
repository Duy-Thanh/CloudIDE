# CloudIDE+ Workspace Image
# This image provides a complete development environment with VS Code, tools, and CloudIDE+ extensions

FROM ubuntu:22.04

# Prevent timezone prompts during installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set locale
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# CloudIDE+ workspace configuration
ENV CLOUDIDE_WORKSPACE=true
ENV CLOUDIDE_VERSION=1.0.0
ENV WORKSPACE_TYPE=development

# Install base dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    wget \
    gnupg \
    lsb-release \
    software-properties-common \
    apt-transport-https \
    locales \
    tzdata \
    git \
    openssh-client \
    unzip \
    zip \
    jq \
    tree \
    htop \
    neofetch \
    nano \
    vim \
    sudo \
    && locale-gen en_US.UTF-8

# Install Node.js LTS
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - \
    && apt-get install -y nodejs

# Install pnpm and yarn
RUN npm install -g pnpm yarn

# Install Python 3 and pip
RUN apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    && ln -s /usr/bin/python3 /usr/bin/python

# Install Go
ENV GO_VERSION=1.21.5
RUN wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz \
    && rm go${GO_VERSION}.linux-amd64.tar.gz
ENV PATH=$PATH:/usr/local/go/bin

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=$PATH:/root/.cargo/bin

# Install Java (OpenJDK 17)
RUN apt-get install -y openjdk-17-jdk
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

# Install PHP
RUN apt-get install -y \
    php8.1 \
    php8.1-cli \
    php8.1-common \
    php8.1-curl \
    php8.1-json \
    php8.1-mbstring \
    php8.1-xml \
    php8.1-zip \
    composer

# Install Ruby
RUN apt-get install -y ruby-full ruby-dev

# Install .NET
RUN wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \
    && dpkg -i packages-microsoft-prod.deb \
    && rm packages-microsoft-prod.deb \
    && apt-get update \
    && apt-get install -y dotnet-sdk-8.0

# Install Docker CLI (for docker-in-docker scenarios)
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-compose-plugin

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl \
    && rm kubectl

# Install Terraform
ENV TERRAFORM_VERSION=1.6.0
RUN wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && mv terraform /usr/local/bin/ \
    && rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf aws awscliv2.zip

# Install Google Cloud CLI
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && apt-get update \
    && apt-get install -y google-cloud-cli

# Install Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Install VS Code Server
RUN curl -fsSL https://code-server.dev/install.sh | sh

# Install VS Code CLI
RUN curl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz \
    && tar -xf vscode_cli.tar.gz \
    && mv code /usr/local/bin/code \
    && rm vscode_cli.tar.gz

# Install development databases (clients)
RUN apt-get install -y \
    postgresql-client \
    mysql-client \
    redis-tools \
    mongodb-clients

# Install build tools
RUN apt-get install -y \
    build-essential \
    cmake \
    gcc \
    g++ \
    make \
    autoconf \
    automake \
    libtool \
    pkg-config

# Create coder user
RUN useradd --create-home --shell=/bin/bash --groups=sudo coder \
    && echo "coder ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Set up user environment
USER coder
WORKDIR /home/coder

# Configure git (placeholder - will be overridden by workspace)
RUN git config --global init.defaultBranch main \
    && git config --global user.name "CloudIDE+ User" \
    && git config --global user.email "user@cloudide.dev"

# Create workspace directories
RUN mkdir -p \
    /home/coder/workspace \
    /home/coder/.local/share/code-server \
    /home/coder/.config/code-server \
    /home/coder/.cloudide \
    /home/coder/.ssh \
    /home/coder/bin

# Add user bin to PATH
ENV PATH=$PATH:/home/coder/bin:/home/coder/.local/bin

# Install Python packages
RUN pip3 install --user \
    requests \
    flask \
    fastapi \
    django \
    numpy \
    pandas \
    matplotlib \
    jupyter \
    black \
    flake8 \
    pytest

# Install Node.js global packages
RUN npm install -g \
    typescript \
    @angular/cli \
    @vue/cli \
    create-react-app \
    create-next-app \
    eslint \
    prettier \
    nodemon \
    pm2 \
    http-server \
    live-server \
    @nestjs/cli \
    expo-cli

# Install Go tools
RUN go install golang.org/x/tools/gopls@latest \
    && go install github.com/go-delve/delve/cmd/dlv@latest \
    && go install honnef.co/go/tools/cmd/staticcheck@latest

# Install Rust tools
RUN /home/coder/.cargo/bin/rustup component add rust-analyzer \
    && /home/coder/.cargo/bin/cargo install cargo-watch

# Create CloudIDE+ configuration
RUN mkdir -p /home/coder/.cloudide/config \
    && echo '{"version": "1.0.0", "workspace_type": "development", "features": {"google_drive": true, "firebase": true, "gemini": true, "zoho": true, "cloudflare": true}}' > /home/coder/.cloudide/config/settings.json

# Create startup script
RUN cat > /home/coder/bin/cloudide-start << 'EOF'
#!/bin/bash
set -e

echo "🚀 Starting CloudIDE+ Workspace..."

# Display system information
echo "📊 System Information:"
echo "  OS: $(lsb_release -d | cut -f2)"
echo "  CPU: $(nproc) cores"
echo "  Memory: $(free -h | awk '/^Mem:/ {print $2}')"
echo "  Disk: $(df -h / | awk 'NR==2 {print $2 " (" $5 " used)"}')"

# Display installed tools
echo "🛠️ Development Tools:"
echo "  Node.js: $(node --version)"
echo "  Python: $(python3 --version)"
echo "  Go: $(go version | cut -d' ' -f3)"
echo "  Java: $(java -version 2>&1 | head -1 | cut -d'"' -f2)"
echo "  Docker: $(docker --version | cut -d' ' -f3 | tr -d ',')"

# Start code-server if requested
if [ "${START_CODE_SERVER:-true}" = "true" ]; then
    echo "🔧 Starting VS Code Server on port 8080..."
    code-server --bind-addr 0.0.0.0:8080 --auth none /home/coder/workspace &
fi

# Load CloudIDE+ extensions
if [ -d "/home/coder/.cloudide/extensions" ]; then
    echo "🔌 Loading CloudIDE+ extensions..."
    for ext in /home/coder/.cloudide/extensions/*.vsix; do
        if [ -f "$ext" ]; then
            code --install-extension "$ext" || true
        fi
    done
fi

# Check for workspace-specific setup
if [ -f "/home/coder/workspace/.cloudide/setup.sh" ]; then
    echo "⚙️ Running workspace-specific setup..."
    chmod +x /home/coder/workspace/.cloudide/setup.sh
    /home/coder/workspace/.cloudide/setup.sh
fi

echo "✅ CloudIDE+ Workspace ready!"
echo "   VS Code Web: http://localhost:8080"
echo "   Terminal: Available in VS Code or SSH"

# Keep container running
if [ "${1:-daemon}" = "daemon" ]; then
    tail -f /dev/null
else
    exec "$@"
fi
EOF

# Make startup script executable
RUN chmod +x /home/coder/bin/cloudide-start

# Create workspace template files
RUN cat > /home/coder/workspace/README.md << 'EOF'
# CloudIDE+ Workspace

Welcome to your CloudIDE+ development environment! 🚀

## Available Tools

### Languages & Runtimes
- **Node.js** - JavaScript/TypeScript development
- **Python** - Data science and web development
- **Go** - Systems and backend development
- **Java** - Enterprise development
- **Rust** - Systems programming
- **PHP** - Web development
- **.NET** - Microsoft stack development
- **Ruby** - Web development

### Development Tools
- **VS Code Server** - Full VS Code experience in browser
- **Git** - Version control
- **Docker CLI** - Container management
- **kubectl** - Kubernetes management
- **Terraform** - Infrastructure as code
- **AWS CLI** - Amazon Web Services
- **Google Cloud CLI** - Google Cloud Platform
- **Azure CLI** - Microsoft Azure

### CloudIDE+ Features
- 🔐 **Google Drive Sync** - Automatic file synchronization
- 🔥 **Firebase Integration** - Real-time database and hosting
- 🤖 **Gemini AI Assistant** - AI-powered code assistance
- 💬 **Zoho SalesIQ** - Integrated customer support
- ⚡ **Cloudflare Deploy** - One-click global deployment

## Getting Started

1. **Access VS Code**: Visit http://localhost:8080
2. **Open Terminal**: Use Ctrl+` in VS Code
3. **Start Coding**: Your workspace is in `/home/coder/workspace`

## Useful Commands

```bash
# Install project dependencies
npm install          # Node.js
pip install -r requirements.txt  # Python
go mod download      # Go

# Start development servers
npm run dev          # Node.js projects
python manage.py runserver  # Django
go run main.go       # Go projects

# CloudIDE+ features
cloudide sync        # Sync with Google Drive
cloudide deploy      # Deploy to cloud
cloudide ai          # AI assistant
```

Happy coding! 🎉
EOF

# Create sample project structure
RUN mkdir -p /home/coder/workspace/{frontend,backend,docs,scripts} \
    && echo "console.log('Hello from CloudIDE+!');" > /home/coder/workspace/frontend/index.js \
    && echo "print('Hello from CloudIDE+!')" > /home/coder/workspace/backend/main.py \
    && echo "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello from CloudIDE+!\")\n}" > /home/coder/workspace/backend/main.go

# Set correct permissions
USER root
RUN chown -R coder:coder /home/coder
USER coder

# Environment variables for CloudIDE+ features
ENV CLOUDIDE_WORKSPACE_DIR=/home/coder/workspace
ENV CLOUDIDE_CONFIG_DIR=/home/coder/.cloudide
ENV CLOUDIDE_EXTENSIONS_DIR=/home/coder/.cloudide/extensions

# Expose ports
EXPOSE 8080 3000 3001 4200 5000 8000 9000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080 || exit 1

# Default command
CMD ["/home/coder/bin/cloudide-start"]
