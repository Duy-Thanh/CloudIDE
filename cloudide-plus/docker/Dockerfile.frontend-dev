# CloudIDE+ Frontend Development Environment
# Enhanced Coder frontend with CloudIDE+ customizations

FROM node:18-bullseye

# Set working directory
WORKDIR /workspace

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    unzip \
    build-essential \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install pnpm globally
RUN npm install -g pnpm@latest

# Install VS Code extension development tools
RUN npm install -g \
    @vscode/vsce \
    yo \
    generator-code \
    webpack \
    webpack-cli \
    typescript \
    eslint \
    prettier

# Create development user
RUN useradd --create-home --shell=/bin/bash --uid=1000 --gid=100 dev \
    && usermod -aG sudo dev \
    && echo "dev ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Switch to dev user
USER dev
WORKDIR /workspace

# Set up Git configuration
RUN git config --global user.name "CloudIDE+ Frontend Dev" \
    && git config --global user.email "frontend@cloudide.dev" \
    && git config --global init.defaultBranch main

# Create necessary directories
RUN mkdir -p \
    /workspace/site \
    /workspace/extensions \
    /workspace/themes \
    /workspace/dist

# CloudIDE+ frontend configuration
ENV VITE_CLOUDIDE_BRANDING=true
ENV VITE_CLOUDIDE_FEATURES=all
ENV VITE_CLOUDIDE_VERSION=1.0.0
ENV VITE_CLOUDIDE_BUILD_DATE=""
ENV VITE_CLOUDIDE_COMMIT_SHA=""

# Development environment variables
ENV NODE_ENV=development
ENV VITE_DEV_SERVER_HOST=0.0.0.0
ENV VITE_DEV_SERVER_PORT=8080
ENV VITE_API_URL=http://localhost:3000
ENV VITE_WS_URL=ws://localhost:3000

# CloudIDE+ API endpoints
ENV VITE_GOOGLE_DRIVE_API_URL=/api/v1/google-drive
ENV VITE_FIREBASE_API_URL=/api/v1/firebase
ENV VITE_GEMINI_API_URL=/api/v1/gemini
ENV VITE_ZOHO_API_URL=/api/v1/zoho
ENV VITE_CLOUDFLARE_API_URL=/api/v1/cloudflare

# Feature flags
ENV VITE_FEATURE_GOOGLE_DRIVE=true
ENV VITE_FEATURE_FIREBASE=true
ENV VITE_FEATURE_GEMINI=true
ENV VITE_FEATURE_ZOHO=true
ENV VITE_FEATURE_CLOUDFLARE=true
ENV VITE_FEATURE_COLLABORATION=true
ENV VITE_FEATURE_AI_ASSISTANT=true
ENV VITE_FEATURE_TEMPLATES=true

# Create CloudIDE+ frontend startup script
RUN cat > /workspace/cloudide-frontend-start.sh << 'EOF'
#!/bin/bash
set -e

echo "🎨 Starting CloudIDE+ Frontend Development..."

# Navigate to site directory
cd /workspace/site

# Check if package.json exists
if [ ! -f "package.json" ]; then
    echo "❌ package.json not found. Please mount the Coder site directory."
    exit 1
fi

# Install dependencies if node_modules doesn't exist or is empty
if [ ! -d "node_modules" ] || [ -z "$(ls -A node_modules)" ]; then
    echo "📦 Installing dependencies..."
    pnpm install
fi

# Apply CloudIDE+ customizations
echo "🔧 Applying CloudIDE+ customizations..."

# Create CloudIDE+ theme directory if it doesn't exist
mkdir -p src/themes/cloudide

# Create CloudIDE+ components directory
mkdir -p src/components/cloudide

# Create CloudIDE+ utilities directory
mkdir -p src/utils/cloudide

# Apply CloudIDE+ branding
if [ ! -f "src/themes/cloudide/index.ts" ]; then
    cat > src/themes/cloudide/index.ts << 'THEME_EOF'
// CloudIDE+ Custom Theme
export const cloudideTheme = {
  name: "CloudIDE+",
  colors: {
    primary: "#007acc",
    primaryHover: "#1177bb",
    secondary: "#6c757d",
    success: "#28a745",
    danger: "#dc3545",
    warning: "#ffc107",
    info: "#17a2b8",
    light: "#f8f9fa",
    dark: "#343a40",
    background: "#1e1e1e",
    surface: "#252526",
    border: "#3c3c3c",
  },
  typography: {
    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
    codeFontFamily: "'Cascadia Code', 'Fira Code', 'Monaco', monospace",
  },
  shadows: {
    small: "0 2px 4px rgba(0, 0, 0, 0.1)",
    medium: "0 4px 8px rgba(0, 0, 0, 0.15)",
    large: "0 8px 16px rgba(0, 0, 0, 0.2)",
  },
};
THEME_EOF
fi

# Create CloudIDE+ utilities
if [ ! -f "src/utils/cloudide/api.ts" ]; then
    cat > src/utils/cloudide/api.ts << 'API_EOF'
// CloudIDE+ API Utilities
export class CloudideAPI {
  private baseUrl: string;

  constructor(baseUrl = '/api/v1') {
    this.baseUrl = baseUrl;
  }

  // Google Drive API
  async syncWithDrive(files: string[]) {
    return fetch(`${this.baseUrl}/google-drive/sync`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ files }),
    });
  }

  // Firebase API
  async deployToFirebase(project: string) {
    return fetch(`${this.baseUrl}/firebase/deploy`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ project }),
    });
  }

  // Gemini AI API
  async getAIAssistance(prompt: string) {
    return fetch(`${this.baseUrl}/gemini/assistance`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt }),
    });
  }

  // Zoho SalesIQ API
  async initializeSalesIQ() {
    return fetch(`${this.baseUrl}/zoho/salesiq/init`);
  }

  // Cloudflare API
  async deployToCloudflare(config: any) {
    return fetch(`${this.baseUrl}/cloudflare/deploy`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(config),
    });
  }
}

export const cloudideAPI = new CloudideAPI();
API_EOF
fi

# Set build timestamp
export VITE_CLOUDIDE_BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Start development server with hot reload
echo "🚀 Starting Vite development server..."
echo "   Frontend URL: http://localhost:8080"
echo "   API URL: ${VITE_API_URL}"
echo "   Features: Google Drive, Firebase, Gemini, Zoho, Cloudflare"

# Run with CloudIDE+ configuration
pnpm dev --host 0.0.0.0 --port 8080
EOF

# Make startup script executable
RUN chmod +x /workspace/cloudide-frontend-start.sh

# Create VS Code workspace configuration for extension development
RUN cat > /workspace/extensions/.vscode/settings.json << 'EOF'
{
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "eslint.workingDirectories": ["./"],
  "files.exclude": {
    "**/node_modules": true,
    "**/out": true,
    "**/*.vsix": false
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/out": true
  },
  "typescript.preferences.includePackageJsonAutoImports": "on",
  "extensions.ignoreRecommendations": false
}
EOF

RUN cat > /workspace/extensions/.vscode/extensions.json << 'EOF'
{
  "recommendations": [
    "ms-vscode.vscode-typescript-next",
    "ms-vscode.vscode-eslint",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-json"
  ]
}
EOF

RUN cat > /workspace/extensions/.vscode/launch.json << 'EOF'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Launch Extension",
      "type": "extensionHost",
      "request": "launch",
      "runtimeExecutable": "${execPath}",
      "args": [
        "--extensionDevelopmentPath=${workspaceFolder}",
        "--new-window"
      ],
      "outFiles": [
        "${workspaceFolder}/out/**/*.js"
      ],
      "preLaunchTask": "npm: watch"
    }
  ]
}
EOF

# Create package.json template for new extensions
RUN cat > /workspace/extensions/extension-template.json << 'EOF'
{
  "name": "cloudide-extension-template",
  "displayName": "CloudIDE+ Extension Template",
  "description": "Template for CloudIDE+ VS Code extensions",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": ["Other"],
  "keywords": ["cloudide", "cloud", "development"],
  "activationEvents": ["onStartupFinished"],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cloudide.helloWorld",
        "title": "Hello CloudIDE+"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "eslint": "^8.28.0",
    "typescript": "^4.9.4",
    "@vscode/test-electron": "^2.2.0",
    "@vscode/vsce": "^2.15.0"
  }
}
EOF

# Set proper permissions
USER root
RUN chown -R dev:users /workspace
USER dev

# Expose development server port
EXPOSE 8080 3000 3001 5173 24678

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080 || exit 1

# Default command
CMD ["/workspace/cloudide-frontend-start.sh"]
