# CloudIDE+ VS Code Extension Development Environment
# Specialized container for developing CloudIDE+ VS Code extensions

FROM node:18-bullseye

# Set working directory
WORKDIR /workspace

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    unzip \
    build-essential \
    python3 \
    python3-pip \
    jq \
    tree \
    vim \
    nano \
    && rm -rf /var/lib/apt/lists/*

# Install VS Code extension development tools
RUN npm install -g \
    @vscode/vsce \
    yo \
    generator-code \
    webpack \
    webpack-cli \
    typescript \
    eslint \
    prettier \
    @types/node \
    @types/vscode \
    ts-node \
    nodemon

# Install extension testing tools
RUN npm install -g \
    @vscode/test-electron \
    mocha \
    chai \
    sinon

# Create development user
RUN useradd --create-home --shell=/bin/bash --uid=1000 --gid=100 extdev \
    && usermod -aG sudo extdev \
    && echo "extdev ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Switch to extension development user
USER extdev
WORKDIR /workspace

# Set up Git configuration
RUN git config --global user.name "CloudIDE+ Extension Dev" \
    && git config --global user.email "extensions@cloudide.dev" \
    && git config --global init.defaultBranch main

# Create extension development directories
RUN mkdir -p \
    /workspace/extensions \
    /workspace/shared \
    /workspace/templates \
    /workspace/dist \
    /workspace/test

# CloudIDE+ extension development environment variables
ENV CLOUDIDE_EXT_DEV=true
ENV CLOUDIDE_EXT_VERSION=1.0.0
ENV NODE_ENV=development
ENV VSCODE_TEST_VERSION=stable

# Create CloudIDE+ extension development utilities
RUN cat > /workspace/cloudide-extension-utils.js << 'EOF'
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class CloudideExtensionUtils {
    static createExtension(name, displayName, description) {
        const extPath = path.join('/workspace/extensions', name);

        if (fs.existsSync(extPath)) {
            throw new Error(`Extension ${name} already exists`);
        }

        // Create extension directory
        fs.mkdirSync(extPath, { recursive: true });

        // Create package.json
        const packageJson = {
            name: name,
            displayName: displayName || name,
            description: description || `CloudIDE+ ${displayName} extension`,
            version: "1.0.0",
            publisher: "cloudide",
            engines: {
                vscode: "^1.74.0"
            },
            categories: ["Other"],
            keywords: ["cloudide", "cloud", "development"],
            activationEvents: ["onStartupFinished"],
            main: "./out/extension.js",
            contributes: {
                commands: [
                    {
                        command: `cloudide.${name}.activate`,
                        title: `Activate ${displayName}`
                    }
                ]
            },
            scripts: {
                "vscode:prepublish": "npm run compile",
                "compile": "tsc -p ./",
                "watch": "tsc -watch -p ./",
                "pretest": "npm run compile && npm run lint",
                "lint": "eslint src --ext ts",
                "test": "node ./out/test/runTest.js",
                "package": "vsce package",
                "publish": "vsce publish"
            },
            devDependencies: {
                "@types/vscode": "^1.74.0",
                "@types/node": "16.x",
                "@typescript-eslint/eslint-plugin": "^5.45.0",
                "@typescript-eslint/parser": "^5.45.0",
                "eslint": "^8.28.0",
                "typescript": "^4.9.4",
                "@vscode/test-electron": "^2.2.0",
                "@vscode/vsce": "^2.15.0"
            }
        };

        fs.writeFileSync(
            path.join(extPath, 'package.json'),
            JSON.stringify(packageJson, null, 2)
        );

        // Create TypeScript config
        const tsConfig = {
            compilerOptions: {
                module: "commonjs",
                target: "ES2020",
                outDir: "out",
                lib: ["ES2020"],
                sourceMap: true,
                rootDir: "src",
                strict: true
            },
            exclude: ["node_modules", ".vscode-test"]
        };

        fs.writeFileSync(
            path.join(extPath, 'tsconfig.json'),
            JSON.stringify(tsConfig, null, 2)
        );

        // Create source directory and main extension file
        fs.mkdirSync(path.join(extPath, 'src'), { recursive: true });

        const extensionTs = `import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
    console.log('CloudIDE+ ${displayName} extension is now active!');

    let disposable = vscode.commands.registerCommand('cloudide.${name}.activate', () => {
        vscode.window.showInformationMessage('${displayName} activated!');
    });

    context.subscriptions.push(disposable);
}

export function deactivate() {}
`;

        fs.writeFileSync(path.join(extPath, 'src', 'extension.ts'), extensionTs);

        // Create README
        const readme = `# CloudIDE+ ${displayName} Extension

${description || `This extension provides ${displayName} functionality for CloudIDE+.`}

## Features

- Feature 1
- Feature 2
- Feature 3

## Requirements

- VS Code 1.74.0 or higher
- CloudIDE+ platform

## Installation

1. Clone this repository
2. Run \`npm install\`
3. Press F5 to open a new Extension Development Host window

## Usage

1. Open the Command Palette (Ctrl+Shift+P)
2. Run "${displayName}: Activate"

## Development

- \`npm run compile\` - Compile TypeScript
- \`npm run watch\` - Watch for changes
- \`npm test\` - Run tests
- \`npm run package\` - Create VSIX package

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## License

MIT License - see LICENSE file for details
`;

        fs.writeFileSync(path.join(extPath, 'README.md'), readme);

        console.log(`‚úÖ Created CloudIDE+ extension: ${name}`);
        console.log(`üìÅ Location: ${extPath}`);
        console.log(`üöÄ Next steps:`);
        console.log(`   cd ${extPath}`);
        console.log(`   npm install`);
        console.log(`   code .`);

        return extPath;
    }

    static buildExtension(extensionPath) {
        try {
            process.chdir(extensionPath);
            execSync('npm install', { stdio: 'inherit' });
            execSync('npm run compile', { stdio: 'inherit' });
            console.log(`‚úÖ Built extension: ${path.basename(extensionPath)}`);
        } catch (error) {
            console.error(`‚ùå Failed to build extension: ${error.message}`);
        }
    }

    static packageExtension(extensionPath) {
        try {
            process.chdir(extensionPath);
            execSync('npm run package', { stdio: 'inherit' });
            console.log(`üì¶ Packaged extension: ${path.basename(extensionPath)}`);
        } catch (error) {
            console.error(`‚ùå Failed to package extension: ${error.message}`);
        }
    }

    static listExtensions() {
        const extensionsDir = '/workspace/extensions';
        if (!fs.existsSync(extensionsDir)) {
            console.log('No extensions found');
            return;
        }

        const extensions = fs.readdirSync(extensionsDir)
            .filter(dir => fs.statSync(path.join(extensionsDir, dir)).isDirectory());

        console.log('üìã CloudIDE+ Extensions:');
        extensions.forEach(ext => {
            const packageJsonPath = path.join(extensionsDir, ext, 'package.json');
            if (fs.existsSync(packageJsonPath)) {
                const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                console.log(`  ${ext} (${pkg.version}) - ${pkg.description}`);
            }
        });
    }
}

module.exports = CloudideExtensionUtils;
EOF

# Create CloudIDE+ extension CLI tool
RUN cat > /workspace/cloudide-ext << 'EOF'
#!/usr/bin/env node

const CloudideExtensionUtils = require('./cloudide-extension-utils');
const path = require('path');

const command = process.argv[2];
const args = process.argv.slice(3);

switch (command) {
    case 'create':
        if (args.length < 1) {
            console.error('Usage: cloudide-ext create <name> [displayName] [description]');
            process.exit(1);
        }
        try {
            CloudideExtensionUtils.createExtension(args[0], args[1], args[2]);
        } catch (error) {
            console.error(`‚ùå ${error.message}`);
            process.exit(1);
        }
        break;

    case 'build':
        if (args.length < 1) {
            console.error('Usage: cloudide-ext build <extension-name>');
            process.exit(1);
        }
        CloudideExtensionUtils.buildExtension(path.join('/workspace/extensions', args[0]));
        break;

    case 'package':
        if (args.length < 1) {
            console.error('Usage: cloudide-ext package <extension-name>');
            process.exit(1);
        }
        CloudideExtensionUtils.packageExtension(path.join('/workspace/extensions', args[0]));
        break;

    case 'list':
        CloudideExtensionUtils.listExtensions();
        break;

    case 'help':
    default:
        console.log(`CloudIDE+ Extension Development CLI

Usage: cloudide-ext <command> [options]

Commands:
  create <name> [displayName] [description]  Create a new extension
  build <name>                               Build an extension
  package <name>                             Package extension as VSIX
  list                                       List all extensions
  help                                       Show this help

Examples:
  cloudide-ext create google-drive "Google Drive Sync" "Sync files with Google Drive"
  cloudide-ext build google-drive
  cloudide-ext package google-drive
  cloudide-ext list
`);
        break;
}
EOF

# Make CLI tool executable
RUN chmod +x /workspace/cloudide-ext

# Create shared utilities for extensions
RUN mkdir -p /workspace/shared/src && cat > /workspace/shared/src/cloudide-common.ts << 'EOF'
// CloudIDE+ Common Utilities for Extensions

export interface CloudideConfig {
    apiUrl: string;
    features: {
        googleDrive: boolean;
        firebase: boolean;
        gemini: boolean;
        zoho: boolean;
        cloudflare: boolean;
    };
}

export class CloudideAPI {
    private config: CloudideConfig;

    constructor(config: CloudideConfig) {
        this.config = config;
    }

    async request(endpoint: string, options: RequestInit = {}) {
        const url = `${this.config.apiUrl}${endpoint}`;
        const response = await fetch(url, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });

        if (!response.ok) {
            throw new Error(`CloudIDE+ API Error: ${response.statusText}`);
        }

        return response.json();
    }

    // Google Drive API methods
    async syncWithGoogleDrive(files: string[]) {
        if (!this.config.features.googleDrive) {
            throw new Error('Google Drive feature is not enabled');
        }
        return this.request('/google-drive/sync', {
            method: 'POST',
            body: JSON.stringify({ files }),
        });
    }

    // Firebase API methods
    async deployToFirebase(project: string) {
        if (!this.config.features.firebase) {
            throw new Error('Firebase feature is not enabled');
        }
        return this.request('/firebase/deploy', {
            method: 'POST',
            body: JSON.stringify({ project }),
        });
    }

    // Gemini AI API methods
    async getAIAssistance(prompt: string) {
        if (!this.config.features.gemini) {
            throw new Error('Gemini AI feature is not enabled');
        }
        return this.request('/gemini/assistance', {
            method: 'POST',
            body: JSON.stringify({ prompt }),
        });
    }

    // Zoho SalesIQ API methods
    async initializeSalesIQ() {
        if (!this.config.features.zoho) {
            throw new Error('Zoho SalesIQ feature is not enabled');
        }
        return this.request('/zoho/salesiq/init');
    }

    // Cloudflare API methods
    async deployToCloudflare(config: any) {
        if (!this.config.features.cloudflare) {
            throw new Error('Cloudflare feature is not enabled');
        }
        return this.request('/cloudflare/deploy', {
            method: 'POST',
            body: JSON.stringify(config),
        });
    }
}

export class CloudideExtensionBase {
    protected api: CloudideAPI;

    constructor(config: CloudideConfig) {
        this.api = new CloudideAPI(config);
    }

    protected showNotification(message: string, type: 'info' | 'warning' | 'error' = 'info') {
        const vscode = require('vscode');
        switch (type) {
            case 'warning':
                vscode.window.showWarningMessage(message);
                break;
            case 'error':
                vscode.window.showErrorMessage(message);
                break;
            default:
                vscode.window.showInformationMessage(message);
        }
    }

    protected async withProgress<T>(
        title: string,
        task: () => Promise<T>
    ): Promise<T> {
        const vscode = require('vscode');
        return vscode.window.withProgress(
            {
                location: vscode.ProgressLocation.Notification,
                title,
                cancellable: false,
            },
            async () => {
                return task();
            }
        );
    }
}
EOF

# Create sample extension templates
RUN mkdir -p /workspace/templates/google-drive-extension
RUN mkdir -p /workspace/templates/firebase-extension
RUN mkdir -p /workspace/templates/gemini-extension
RUN mkdir -p /workspace/templates/deployment-extension

# Create extension development startup script
RUN cat > /workspace/start-extension-dev.sh << 'EOF'
#!/bin/bash
set -e

echo "üîå Starting CloudIDE+ Extension Development Environment..."

# Display environment info
echo "üìä Development Environment:"
echo "  Node.js: $(node --version)"
echo "  npm: $(npm --version)"
echo "  TypeScript: $(npx tsc --version)"
echo "  VS Code Extension CLI: $(vsce --version)"

# Check if extensions directory exists
if [ ! -d "/workspace/extensions" ]; then
    echo "üìÅ Creating extensions directory..."
    mkdir -p /workspace/extensions
fi

# List existing extensions
echo "üìã Available Extensions:"
/workspace/cloudide-ext list

echo ""
echo "üöÄ CloudIDE+ Extension Development Ready!"
echo ""
echo "Available Commands:"
echo "  cloudide-ext create <name>     - Create new extension"
echo "  cloudide-ext build <name>      - Build extension"
echo "  cloudide-ext package <name>    - Package as VSIX"
echo "  cloudide-ext list              - List extensions"
echo ""
echo "Example:"
echo "  cloudide-ext create google-drive-sync 'Google Drive Sync' 'Sync files with Google Drive'"
echo ""

# Keep container running
if [ "${1:-daemon}" = "daemon" ]; then
    tail -f /dev/null
else
    exec "$@"
fi
EOF

# Make startup script executable
RUN chmod +x /workspace/start-extension-dev.sh

# Add cloudide-ext to PATH
ENV PATH=$PATH:/workspace

# Set proper permissions
USER root
RUN chown -R extdev:users /workspace
USER extdev

# Expose development ports
EXPOSE 3000 8080 9229

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node --version || exit 1

# Default command
CMD ["/workspace/start-extension-dev.sh"]
