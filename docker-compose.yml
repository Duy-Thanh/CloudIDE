version: '3.8'

services:
  # Main code-server instance with CloudIDE+ extensions
  cloudide-core:
    build:
      context: ./docker
      dockerfile: Dockerfile.code-server
    container_name: cloudide-plus
    ports:
      - "8080:8080"
      - "3000:3000"  # For development servers
      - "3001:3001"  # For preview deployments
    volumes:
      - ./workspace:/home/coder/workspace
      - ./cloudide-extensions:/home/coder/extensions
      - ./config:/home/coder/.config
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
    environment:
      - PASSWORD=${CODE_SERVER_PASSWORD:-cloudide123}
      - SUDO_PASSWORD=${SUDO_PASSWORD:-cloudide123}
      - TZ=UTC
      - SHELL=/bin/bash
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - ZOHO_SALESIQ_TOKEN=${ZOHO_SALESIQ_TOKEN:-}
    networks:
      - cloudide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - postgres

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cloudide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudide-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for user data and project metadata
  postgres:
    image: postgres:15-alpine
    container_name: cloudide-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cloudide
      - POSTGRES_USER=cloudide
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cloudide123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cloudide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudide"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for SSL termination and load balancing
  nginx:
    image: nginx:alpine
    container_name: cloudide-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - cloudide-network
    restart: unless-stopped
    depends_on:
      - cloudide-core

  # File sync service for cloud storage integration
  sync-service:
    build:
      context: ./docker
      dockerfile: Dockerfile.sync-service
    container_name: cloudide-sync
    environment:
      - GOOGLE_DRIVE_CLIENT_ID=${GOOGLE_DRIVE_CLIENT_ID:-}
      - GOOGLE_DRIVE_CLIENT_SECRET=${GOOGLE_DRIVE_CLIENT_SECRET:-}
      - DROPBOX_APP_KEY=${DROPBOX_APP_KEY:-}
      - DROPBOX_APP_SECRET=${DROPBOX_APP_SECRET:-}
      - ONEDRIVE_CLIENT_ID=${ONEDRIVE_CLIENT_ID:-}
      - ONEDRIVE_CLIENT_SECRET=${ONEDRIVE_CLIENT_SECRET:-}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://cloudide:${POSTGRES_PASSWORD:-cloudide123}@postgres:5432/cloudide
    volumes:
      - ./workspace:/app/workspace
      - ./config/sync:/app/config
    networks:
      - cloudide-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # AI assistant service for Gemini API integration
  ai-service:
    build:
      context: ./docker
      dockerfile: Dockerfile.ai-service
    container_name: cloudide-ai
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://cloudide:${POSTGRES_PASSWORD:-cloudide123}@postgres:5432/cloudide
    networks:
      - cloudide-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # Deployment service for one-click deployments
  deploy-service:
    build:
      context: ./docker
      dockerfile: Dockerfile.deploy-service
    container_name: cloudide-deploy
    environment:
      - VERCEL_TOKEN=${VERCEL_TOKEN:-}
      - NETLIFY_TOKEN=${NETLIFY_TOKEN:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN:-}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://cloudide:${POSTGRES_PASSWORD:-cloudide123}@postgres:5432/cloudide
    volumes:
      - ./workspace:/app/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cloudide-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # Monitoring and analytics service
  monitoring:
    image: prom/prometheus:latest
    container_name: cloudide-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cloudide-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cloudide-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cloudide-network
    restart: unless-stopped
    depends_on:
      - monitoring

networks:
  cloudide-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
